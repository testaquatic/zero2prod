# "제로부터 시작하는 러스트 백엔드 프로그래밍" 연습용 프로젝트
[package]
name = "zero2prod"
version = "0.1.0"
edition = "2021"
authors = ["aquatic"]

[lib]
# 어떤 형태의 경로든 기술할 수 있지만 커뮤니티의 관습을 따른다.
# `name` 필드를 사용해서 라이브러리 이름을 지정한다.
# 지정하지 않으면 cargo는 `package.name`을 사용한다.
# 우리가 원하는 바다.
path = "src/lib.rs"

# 이중 대괄호를 사용한 것에 주의하자.
# TOML에서의 배열 표기 문법이다.
# 프로젝트에 하나의 라이브러리는 물론 여러 바이너리를 포함할 수 있다.
# 동일한 저장소에서 여러 라이브러리를 관리하고자 한다면 workspace 피처를 살펴보기 바란다.
[[bin]]
path = "src/main.rs"
name = "zero2prod"

[dependencies]
actix-web = "4"
tokio = { version = "1", features = ["macros", "rt-multi-thread"] }
# 옵셔널 `derive` 피처를 사용해야 `serde`의 절차적 매크로인 `#[derive(Serialize)]`와 `#[derive(Deserialize)]`를 사용할 수 있다.
# 이 피처는 기본적으로 활성화되어 있지 않다.
# 프로젝트에 불필요한 디펜던시를 사용하지 않도록 하기 위해서이다.
serde = { version = "1", features = ["derive"] }
config = "0.14"
trait-variant = "0.1"
uuid = { version = "1", features = ["v4"] }
tracing = { version = "0.1", features = ["log"] }
tracing-subscriber = { version = "0.3", features = ["registry", "env-filter"] }
tracing-bunyan-formatter = "0.3"
tracing-log = "0.2"

[dependencies.sqlx]
version = "0.7"
default-features = false
features = [
    "runtime-tokio-rustls",
    "macros",
    "postgres",
    "uuid",
    "chrono",
    "migrate",
]

[dependencies.chrono]
version = "0.4"
default-features = false
features = ["clock"]

# Dev 디펜던시는 테스트나 예시를 실행할 때만 사용된다.
# 최종 애플리케이션 바이너리에는 포함되지 않는다.
[dev-dependencies]
reqwest = "0.12"
